#!/bin/bash
# ===== Setup Environment Files Script =====
# –ü—É—Ç—å: setup-env.sh (–∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞, —Ä—è–¥–æ–º —Å docker-compose.yml)
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: chmod +x setup-env.sh && ./setup-env.sh

set -e

echo "üöÄ OneFlow.AI - Environment Setup"
echo "=================================="
echo ""

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
generate_password() {
    openssl rand -base64 32 | tr -d "=+/" | cut -c1-32
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JWT —Å–µ–∫—Ä–µ—Ç–∞
generate_jwt_secret() {
    openssl rand -hex 32
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è openssl
if ! command -v openssl &> /dev/null; then
    echo -e "${RED}‚ùå OpenSSL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π.${NC}"
    exit 1
fi

echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
echo ""

# 1. –û—Å–Ω–æ–≤–Ω–æ–π .env
if [ -f .env ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞—é...${NC}"
else
    cat > .env << EOF
# ===== OneFlow.AI - Main Application Configuration =====
# Generated: $(date)

# Application
ENVIRONMENT=development
LOG_LEVEL=INFO
APP_PORT=8000

# Database
DATABASE_URL=postgresql://oneflow:oneflow_password@postgres:5432/oneflow

# Redis
REDIS_URL=redis://:redis_password@redis:6379/0

# Security
JWT_SECRET=$(generate_jwt_secret)
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8000

# Features
ENABLE_METRICS=true
ENABLE_TRACING=false

# API Keys (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–ª—é—á–∏)
OPENAI_API_KEY=
ANTHROPIC_API_KEY=
GOOGLE_API_KEY=
EOF
    echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω: .env${NC}"
fi

# 2. PostgreSQL
if [ -f .env.postgres ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –§–∞–π–ª .env.postgres —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞—é...${NC}"
else
    cat > .env.postgres << EOF
# ===== PostgreSQL Configuration =====
# Generated: $(date)

POSTGRES_USER=oneflow
POSTGRES_PASSWORD=oneflow_password
POSTGRES_DB=oneflow
PGDATA=/var/lib/postgresql/data/pgdata
POSTGRES_PORT=5432

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL
POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
EOF
    echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω: .env.postgres${NC}"
fi

# 3. Redis
if [ -f .env.redis ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –§–∞–π–ª .env.redis —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞—é...${NC}"
else
    cat > .env.redis << EOF
# ===== Redis Configuration =====
# Generated: $(date)

REDIS_PASSWORD=redis_password
REDIS_PORT=6379
EOF
    echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω: .env.redis${NC}"
fi

# 4. Grafana
if [ -f .env.grafana ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –§–∞–π–ª .env.grafana —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞—é...${NC}"
else
    cat > .env.grafana << EOF
# ===== Grafana Configuration =====
# Generated: $(date)

GF_SECURITY_ADMIN_USER=admin
GF_SECURITY_ADMIN_PASSWORD=admin
GF_USERS_ALLOW_SIGN_UP=false
GF_SERVER_HTTP_PORT=3000
GF_ANALYTICS_REPORTING_ENABLED=false
GF_INSTALL_PLUGINS=
GRAFANA_PORT=3000
EOF
    echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω: .env.grafana${NC}"
fi

# 5. pgAdmin
if [ -f .env.pgadmin ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –§–∞–π–ª .env.pgadmin —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞—é...${NC}"
else
    cat > .env.pgadmin << EOF
# ===== pgAdmin Configuration =====
# Generated: $(date)

PGADMIN_DEFAULT_EMAIL=admin@oneflow.ai
PGADMIN_DEFAULT_PASSWORD=admin
PGADMIN_DISABLE_POSTFIX=true
PGADMIN_PORT=5050
EOF
    echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω: .env.pgadmin${NC}"
fi

# 6. Production files (—Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏)
echo ""
echo "üîí –°–æ–∑–¥–∞–Ω–∏–µ production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏..."

PROD_POSTGRES_PASSWORD=$(generate_password)
PROD_REDIS_PASSWORD=$(generate_password)
PROD_JWT_SECRET=$(generate_jwt_secret)

if [ -f .env.production ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –§–∞–π–ª .env.production —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞—é...${NC}"
else
    cat > .env.production << EOF
# ===== OneFlow.AI - Production Configuration =====
# Generated: $(date)
# ‚ö†Ô∏è  –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ ALLOWED_ORIGINS –∏ API –∫–ª—é—á–∏!

# Application
ENVIRONMENT=production
LOG_LEVEL=WARNING
APP_PORT=8000

# Database
DATABASE_URL=postgresql://oneflow:${PROD_POSTGRES_PASSWORD}@postgres:5432/oneflow

# Redis
REDIS_URL=redis://:${PROD_REDIS_PASSWORD}@redis:6379/0

# Security
JWT_SECRET=${PROD_JWT_SECRET}
ALLOWED_ORIGINS=https://yourdomain.com,https://api.yourdomain.com

# Features
ENABLE_METRICS=true
ENABLE_TRACING=true

# API Keys (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ï!)
OPENAI_API_KEY=sk-...
ANTHROPIC_API_KEY=sk-ant-...
GOOGLE_API_KEY=...
EOF
    echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω: .env.production${NC}"
fi

if [ -f .env.postgres.production ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –§–∞–π–ª .env.postgres.production —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞—é...${NC}"
else
    cat > .env.postgres.production << EOF
# ===== PostgreSQL Production Configuration =====
# Generated: $(date)

POSTGRES_USER=oneflow
POSTGRES_PASSWORD=${PROD_POSTGRES_PASSWORD}
POSTGRES_DB=oneflow
PGDATA=/var/lib/postgresql/data/pgdata
POSTGRES_PORT=5432

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL
POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
EOF
    echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω: .env.postgres.production${NC}"
fi

if [ -f .env.redis.production ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –§–∞–π–ª .env.redis.production —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞—é...${NC}"
else
    cat > .env.redis.production << EOF
# ===== Redis Production Configuration =====
# Generated: $(date)

REDIS_PASSWORD=${PROD_REDIS_PASSWORD}
REDIS_PORT=6379
EOF
    echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω: .env.redis.production${NC}"
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo ""
echo "üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
mkdir -p logs backups monitoring/{prometheus,grafana/{dashboards,datasources}}
echo -e "${GREEN}‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã${NC}"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
echo ""
echo "üîê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞..."
chmod 600 .env* 2>/dev/null || true
echo -e "${GREEN}‚úÖ –ü—Ä–∞–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"

# –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
echo ""
echo "=================================="
echo -e "${GREEN}‚ú® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
echo ""
echo "üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"
echo "   - .env (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)"
echo "   - .env.postgres"
echo "   - .env.redis"
echo "   - .env.grafana"
echo "   - .env.pgadmin"
echo "   - .env.production (—Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏)"
echo "   - .env.postgres.production"
echo "   - .env.redis.production"
echo ""
echo "üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "   1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª—ã –∏ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏"
echo "   2. –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞: –∑–∞–º–µ–Ω–∏—Ç–µ ALLOWED_ORIGINS –≤ .env.production"
echo "   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up -d"
echo ""
echo "üí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "   - docker-compose up -d              # –ó–∞–ø—É—Å–∫ (dev)"
echo "   - docker-compose --profile full up -d  # –ó–∞–ø—É—Å–∫ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"
echo "   - docker-compose logs -f            # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å .env* –≤ .gitignore!${NC}"
echo ""
