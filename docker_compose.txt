# OneFlow.AI - Docker Compose Configuration
# Production-ready multi-container setup

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: oneflow-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-oneflow}
      POSTGRES_USER: ${POSTGRES_USER:-oneflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-oneflow}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oneflow-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: oneflow-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oneflow-network

  # OneFlow.AI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: oneflow-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-oneflow}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-oneflow}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      
      # JWT Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      
      # API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      STABILITY_API_KEY: ${STABILITY_API_KEY}
      ELEVENLABS_API_KEY: ${ELEVENLABS_API_KEY}
      
      # Application
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      WORKERS: ${WORKERS:-4}
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-*}
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
    ports:
      - "${APP_PORT:-8000}:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - oneflow-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: oneflow-nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - oneflow-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: oneflow-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - oneflow-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: oneflow-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - oneflow-network

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  oneflow-network:
    driver: bridge
