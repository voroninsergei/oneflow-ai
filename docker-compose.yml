version: '3.8'

services:
  # ===== OneFlow.AI Application =====
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: oneflow-ai-app
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://oneflow:oneflow_password@postgres:5432/oneflow
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=${JWT_SECRET:-change-me-in-production}
      - ENABLE_METRICS=true
      - ENABLE_TRACING=false
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8000
    env_file:
      - .env  # API ключи провайдеров
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - oneflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./logs:/app/logs

  # ===== PostgreSQL Database =====
  postgres:
    image: postgres:16-alpine
    container_name: oneflow-postgres
    environment:
      - POSTGRES_USER=oneflow
      - POSTGRES_PASSWORD=oneflow_password
      - POSTGRES_DB=oneflow
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - oneflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U oneflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===== Redis Cache =====
  redis:
    image: redis:7-alpine
    container_name: oneflow-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    networks:
      - oneflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ===== Prometheus (Metrics) =====
  prometheus:
    image: prom/prometheus:latest
    container_name: oneflow-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - oneflow-network
    restart: unless-stopped
    depends_on:
      - app

  # ===== Grafana (Dashboards) =====
  grafana:
    image: grafana/grafana:latest
    container_name: oneflow-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - oneflow-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # ===== Jaeger (Distributed Tracing) - опционально =====
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: oneflow-jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # Jaeger UI
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - oneflow-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  oneflow-network:
    driver: bridge
