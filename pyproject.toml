[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

# ============================================================================
# Project Metadata (PEP 621)
# ============================================================================
[project]
name = "oneflow-ai"
version = "2.0.0"
description = "Multi-provider AI orchestration platform with pricing, routing, and analytics"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
authors = [
    {name = "Sergey Voronin", email = "voroninsergeiai@gmail.com"}
]
keywords = [
    "ai",
    "artificial-intelligence",
    "machine-learning",
    "gpt",
    "openai",
    "anthropic",
    "api-aggregator",
    "orchestration",
    "pricing",
    "routing",
    "analytics",
    "fastapi",
    "multi-region",
    "compliance",
    "gdpr",
    "pydantic-v2",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Information Technology",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Operating System :: OS Independent",
    "Framework :: FastAPI",
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 2",
    "Typing :: Typed",
]

# ============================================================================
# URLs
# ============================================================================
[project.urls]
Homepage = "https://github.com/voroninsergei/oneflow-ai"
Documentation = "https://docs.oneflow.ai"
Repository = "https://github.com/voroninsergei/oneflow-ai"
"Bug Tracker" = "https://github.com/voroninsergei/oneflow-ai/issues"
Changelog = "https://github.com/voroninsergei/oneflow-ai/blob/main/CHANGELOG.md"

# ============================================================================
# Core Dependencies
# ============================================================================
[project.dependencies]
# Web framework
fastapi = ">=0.109.0,<1.0.0"
uvicorn = {extras = ["standard"], version = ">=0.27.0,<1.0.0"}

# Data validation & settings
pydantic = ">=2.5.0,<3.0.0"
pydantic-settings = ">=2.1.0,<3.0.0"

# HTTP client
httpx = ">=0.26.0,<1.0.0"

# Database (optional in core, required for production)
sqlalchemy = {version = ">=2.0.0,<3.0.0", optional = true}

# Authentication
pyjwt = ">=2.8.0,<3.0.0"
passlib = {extras = ["bcrypt"], version = ">=1.7.4,<2.0.0"}
python-multipart = ">=0.0.6,<1.0.0"

# Utilities
python-dotenv = ">=1.0.0,<2.0.0"

# Structured logging
structlog = ">=24.1.0,<25.0.0"

# ============================================================================
# Optional Dependencies (Feature Groups)
# ============================================================================
[project.optional-dependencies]
# Development tools
dev = [
    "pytest>=8.0.0,<9.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-asyncio>=0.23.0,<1.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "mypy>=1.8.0,<2.0.0",
    "ruff>=0.1.14,<1.0.0",
    "pre-commit>=3.6.0,<4.0.0",
    "httpx>=0.26.0",  # for testing
]

# AI Provider SDKs
providers = [
    "openai>=1.10.0,<2.0.0",
    "anthropic>=0.18.0,<1.0.0",
]

# Production database support
database = [
    "sqlalchemy>=2.0.0,<3.0.0",
    "alembic>=1.13.0,<2.0.0",
    "asyncpg>=0.29.0,<1.0.0",  # PostgreSQL async
    "psycopg2-binary>=2.9.0,<3.0.0",  # PostgreSQL sync
]

# Observability & Monitoring
observability = [
    "prometheus-client>=0.19.0,<1.0.0",
    "opentelemetry-api>=1.22.0,<2.0.0",
    "opentelemetry-sdk>=1.22.0,<2.0.0",
    "opentelemetry-instrumentation-fastapi>=0.43b0,<1.0.0",
    "opentelemetry-instrumentation-sqlalchemy>=0.43b0,<1.0.0",
    "opentelemetry-instrumentation-httpx>=0.43b0,<1.0.0",
]

# Security & Compliance
security = [
    "cryptography>=42.0.0,<43.0.0",
    "python-jose[cryptography]>=3.3.0,<4.0.0",
]

# Rate limiting & Circuit breaking
resilience = [
    "pybreaker>=1.0.0,<2.0.0",
    "tenacity>=8.2.0,<9.0.0",
    "aiolimiter>=1.1.0,<2.0.0",
]

# Full production deployment
production = [
    "oneflow-ai[database,observability,security,resilience,providers]",
    "gunicorn>=21.2.0,<22.0.0",
]

# Everything (for development)
all = [
    "oneflow-ai[dev,providers,database,observability,security,resilience]",
]

# ============================================================================
# Console Scripts
# ============================================================================
[project.scripts]
oneflow = "src.cli:main"
oneflow-server = "src.web.server:main"

# ============================================================================
# Setuptools Configuration
# ============================================================================
[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*", "docs*", "examples*"]
namespaces = false

[tool.setuptools.package-data]
src = ["py.typed", "**/*.json", "**/*.yaml", "**/*.yml"]

# ============================================================================
# Ruff - Fast Python Linter & Formatter
# ============================================================================
[tool.ruff]
line-length = 100
target-version = "py310"
src = ["src", "tests"]
extend-exclude = [
    ".git",
    ".venv",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "ARG",   # flake8-unused-arguments
    "SIM",   # flake8-simplify
    "TCH",   # flake8-type-checking
    "PTH",   # flake8-use-pathlib
    "RUF",   # Ruff-specific rules
    "ASYNC", # flake8-async
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # function call in argument defaults (FastAPI dependencies)
    "B904",   # raise from None
    "UP007",  # Use X | Y for type unions (prefer Optional for clarity)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]  # unused/wildcard imports
"tests/**/*.py" = ["ARG", "S101", "PLR2004"]  # allow assert, magic values
"src/api/*/schemas.py" = ["TCH001", "TCH002", "TCH003"]  # no TYPE_CHECKING in Pydantic

[tool.ruff.lint.isort]
known-first-party = ["src"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

# ============================================================================
# MyPy - Static Type Checker (Strict Mode)
# ============================================================================
[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_no_return = true
warn_unreachable = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
check_untyped_defs = true
no_implicit_optional = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true
color_output = true

# Plugins
plugins = [
    "pydantic.mypy",
    "sqlalchemy.ext.mypy.plugin",
]

# MyPy path
mypy_path = "src"
namespace_packages = true
explicit_package_bases = true

# Per-module overrides
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_calls = false

[[tool.mypy.overrides]]
module = [
    "openai.*",
    "anthropic.*",
    "passlib.*",
    "jose.*",
    "structlog.*",
    "prometheus_client.*",
    "opentelemetry.*",
    "pybreaker.*",
    "tenacity.*",
    "aiolimiter.*",
]
ignore_missing_imports = true

# Pydantic plugin configuration
[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

# ============================================================================
# Pytest - Testing Framework
# ============================================================================
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--asyncio-mode=auto",
]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (require external services)",
    "e2e: End-to-end tests (full system)",
    "slow: Slow tests (> 1 second)",
    "providers: Tests requiring real AI provider API keys",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# ============================================================================
# Coverage
# ============================================================================
[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/.venv/*",
    "*/venv/*",
    "src/cli.py",  # CLI entrypoint (tested via integration)
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@overload",
    "\\.\\.\\.",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# ============================================================================
# Bandit - Security Linter
# ============================================================================
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101"]  # allow assert in tests

# ============================================================================
# Pre-commit Configuration Reference
# ============================================================================
# Create .pre-commit-config.yaml with:
# repos:
#   - repo: https://github.com/astral-sh/ruff-pre-commit
#     rev: v0.1.14
#     hooks:
#       - id: ruff
#         args: [--fix]
#       - id: ruff-format
#   - repo: https://github.com/pre-commit/mirrors-mypy
#     rev: v1.8.0
#     hooks:
#       - id: mypy
#         additional_dependencies: [pydantic>=2.5.0]
