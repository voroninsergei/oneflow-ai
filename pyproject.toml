[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "oneflow-ai"
version = "2.0.0"
description = "AI Model Aggregator with Pricing, Routing, Analytics & Authentication"
readme = "README.md"
license = {text = "Proprietary"}
authors = [
    {name = "Sergey Voronin", email = "voroninsergeiai@gmail.com"}
]
requires-python = ">=3.9"
keywords = ["ai", "llm", "routing", "pricing", "aggregator", "analytics"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# Минимальные зависимости для core функциональности
dependencies = [
    "requests>=2.31.0",
    "pydantic>=2.5.0",
]

[project.optional-dependencies]
# API провайдеры - для работы с реальными AI сервисами
api = [
    "openai>=1.12.0",
    "anthropic>=0.18.0",
    "stability-sdk>=0.8.0",
    "elevenlabs>=0.2.0",
]

# Web сервер - для REST API и дашборда
web = [
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "python-multipart>=0.0.9",
]

# База данных - для персистентности
db = [
    "sqlalchemy>=2.0.25",
    "alembic>=1.13.0",  # для миграций
]

# Аутентификация - для безопасности
auth = [
    "PyJWT>=2.8.0",
    "passlib[bcrypt]>=1.7.4",
    "python-jose[cryptography]>=3.3.0",
]

# Разработка - инструменты для dev
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.0",
    "black>=24.0.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

# Полная установка - всё вместе
all = [
    "oneflow-ai[api,web,db,auth]",
]

# Производственное окружение - без dev-инструментов
prod = [
    "oneflow-ai[api,web,db,auth]",
]

[project.urls]
Homepage = "https://github.com/voroninsergei/oneflow-ai"
Documentation = "https://github.com/voroninsergei/oneflow-ai/tree/main/docs"
Repository = "https://github.com/voroninsergei/oneflow-ai"
Issues = "https://github.com/voroninsergei/oneflow-ai/issues"

[project.scripts]
oneflow = "src.cli:main"
oneflow-server = "web_server:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__
"tests/*" = ["B011"]      # assert false

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "openai.*",
    "anthropic.*",
    "elevenlabs.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
