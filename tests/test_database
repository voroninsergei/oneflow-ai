"""
Tests for Database module.
Тесты для модуля базы данных.
"""

import sys
import os
import pytest
import tempfile

sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from database import DatabaseManager, User, Request, Transaction, get_db_manager


@pytest.fixture
def db():
    """Create temporary database for testing."""
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as f:
        db_path = f.name
    
    db_url = f'sqlite:///{db_path}'
    db_manager = DatabaseManager(database_url=db_url)
    
    yield db_manager
    
    # Cleanup
    try:
        os.remove(db_path)
    except:
        pass


def test_database_initialization(db):
    """Test database initialization."""
    assert db.engine is not None
    assert db.SessionLocal is not None


def test_create_user(db):
    """Test creating a user."""
    user = db.create_user('testuser', 'test@example.com', initial_balance=100.0)
    
    assert user.id is not None
    assert user.username == 'testuser'
    assert user.email == 'test@example.com'
    assert user.balance == 100.0
    assert user.is_active == True


def test_get_user(db):
    """Test retrieving a user."""
    user = db.create_user('testuser', 'test@example.com')
    retrieved = db.get_user(user.id)
    
    assert retrieved is not None
    assert retrieved.username == 'testuser'


def test_update_user_balance(db):
    """Test updating user balance."""
    user = db.create_user('testuser', 'test@example.com', initial_balance=100.0)
    db.update_user_balance(user.id, 150.0)
    
    updated = db.get_user(user.id)
    assert updated.balance == 150.0


def test_create_request(db):
    """Test creating a request record."""
    user = db.create_user('testuser', 'test@example.com')
    
    request = db.create_request(
        user_id=user.id,
        provider='gpt',
        model='gpt-3.5-turbo',
        prompt='Test prompt',
        response='Test response',
        cost=5.0,
        status='success'
    )
    
    assert request.id is not None
    assert request.provider == 'gpt'
    assert request.cost == 5.0


def test_get_requests(db):
    """Test retrieving requests."""
    user = db.create_user('testuser', 'test@example.com')
    
    for i in range(5):
        db.create_request(
            user_id=user.id,
            provider='gpt',
            model='gpt-3.5-turbo',
            prompt=f'Prompt {i}',
            response=f'Response {i}',
            cost=1.0
        )
    
    requests = db.get_requests(user_id=user.id, limit=10)
    assert len(requests) == 5


def test_create_transaction(db):
    """Test creating a transaction."""
    user = db.create_user('testuser', 'test@example.com', initial_balance=100.0)
    
    transaction = db.create_transaction(
        user_id=user.id,
        trans_type='add',
        amount=50.0,
        balance_before=100.0,
        balance_after=150.0,
        description='Test transaction'
    )
    
    assert transaction.id is not None
    assert transaction.amount == 50.0
    assert transaction.type == 'add'


def test_get_transactions(db):
    """Test retrieving transactions."""
    user = db.create_user('testuser', 'test@example.com')
    
    for i in range(3):
        db.create_transaction(
            user_id=user.id,
            trans_type='add',
            amount=10.0,
            balance_before=i * 10.0,
            balance_after=(i + 1) * 10.0
        )
    
    transactions = db.get_transactions(user_id=user.id, limit=10)
    assert len(transactions) == 3


def test_provider_config(db):
    """Test provider configuration."""
    provider = db.create_or_update_provider(
        provider_name='gpt',
        rate_per_unit=1.5,
        is_active=True,
        budget_limit=100.0
    )
    
    assert provider.provider_name == 'gpt'
    assert provider.rate_per_unit == 1.5


def test_get_total_cost(db):
    """Test getting total cost."""
    user = db.create_user('testuser', 'test@example.com')
    
    db.create_request(user.id, 'gpt', 'gpt', 'p1', 'r1', 5.0)
    db.create_request(user.id, 'gpt', 'gpt', 'p2', 'r2', 3.0)
    
    total = db.get_total_cost(user_id=user.id)
    assert total == 8.0


def test_get_request_count(db):
    """Test getting request count."""
    user = db.create_user('testuser', 'test@example.com')
    
    for i in range(5):
        db.create_request(user.id, 'gpt', 'gpt', f'p{i}', f'r{i}', 1.0)
    
    count = db.get_request_count(user_id=user.id)
    assert count == 5


def test_provider_stats(db):
    """Test provider statistics."""
    user = db.create_user('testuser', 'test@example.com')
    
    db.create_request(user.id, 'gpt', 'gpt', 'p1', 'r1', 5.0, 'success')
    db.create_request(user.id, 'gpt', 'gpt', 'p2', 'r2', 3.0, 'success')
    db.create_request(user.id, 'image', 'image', 'p3', 'r3', 10.0, 'success')
    db.create_request(user.id, 'gpt', 'gpt', 'p4', 'r4', 2.0, 'error')
    
    stats = db.get_provider_stats(user_id=user.id)
    
    assert 'gpt' in stats
    assert stats['gpt']['count'] == 3
    assert stats['gpt']['total_cost'] == 10.0
    assert stats['gpt']['success_count'] == 2
    assert stats['gpt']['error_count'] == 1
