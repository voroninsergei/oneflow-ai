"""
Tests for Authentication module.
Тесты для модуля аутентификации.
"""

import sys
import os
import pytest

sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from auth_module import (
    PasswordHasher,
    TokenManager,
    APIKeyManager,
    AuthenticationService,
    User
)


def test_password_hashing():
    """Test password hashing."""
    hasher = PasswordHasher()
    password = "SecurePass123!"
    hashed = hasher.hash_password(password)
    
    assert hasher.verify_password(password, hashed)
    assert not hasher.verify_password("WrongPassword", hashed)


def test_password_strength():
    """Test password strength validation."""
    hasher = PasswordHasher()
    
    # Weak passwords
    assert not hasher.is_password_strong("short")[0]
    assert not hasher.is_password_strong("alllowercase")[0]
    assert not hasher.is_password_strong("ALLUPPERCASE")[0]
    assert not hasher.is_password_strong("NoSpecial123")[0]
    
    # Strong password
    is_strong, error = hasher.is_password_strong("SecurePass123!")
    assert is_strong
    assert error is None


def test_create_access_token():
    """Test JWT access token creation."""
    token_manager = TokenManager()
    data = {"sub": "testuser", "user_id": 1}
    
    token = token_manager.create_access_token(data)
    assert token is not None
    assert len(token) > 0


def test_verify_token():
    """Test JWT token verification."""
    token_manager = TokenManager()
    data = {"sub": "testuser", "user_id": 1}
    
    access_token = token_manager.create_access_token(data)
    payload = token_manager.verify_token(access_token, token_type="access")
    
    assert payload is not None
    assert payload['sub'] == "testuser"
    assert payload['user_id'] == 1


def test_api_key_generation():
    """Test API key generation."""
    api_key_manager = APIKeyManager()
    
    api_key = api_key_manager.generate_api_key(user_id=123)
    
    assert api_key.startswith("ofai_")
    assert "_123_" in api_key


def test_api_key_parsing():
    """Test API key parsing."""
    api_key_manager = APIKeyManager()
    
    api_key = api_key_manager.generate_api_key(user_id=456)
    info = api_key_manager.parse_api_key(api_key)
    
    assert info is not None
    assert info['user_id'] == 456
    assert info['prefix'] == 'ofai'


def test_user_registration():
    """Test user registration."""
    auth = AuthenticationService()
    
    user, error = auth.register_user(
        username="testuser",
        email="test@example.com",
        password="SecurePass123!"
    )
    
    assert user is not None
    assert error is None
    assert user.username == "testuser"
    assert user.api_key is not None


def test_duplicate_username():
    """Test duplicate username rejection."""
    auth = AuthenticationService()
    
    user1, _ = auth.register_user("testuser", "test1@example.com", "Pass123!")
    assert user1 is not None
    
    user2, error = auth.register_user("testuser", "test2@example.com", "Pass456!")
    assert user2 is None
    assert "already exists" in error


def test_user_login():
    """Test user login."""
    auth = AuthenticationService()
    
    auth.register_user("testuser", "test@example.com", "SecurePass123!")
    token_data = auth.login("testuser", "SecurePass123!")
    
    assert token_data is not None
    assert 'access_token' in token_data
    assert 'refresh_token' in token_data


def test_failed_login():
    """Test failed login."""
    auth = AuthenticationService()
    
    auth.register_user("testuser", "test@example.com", "SecurePass123!")
    token_data = auth.login("testuser", "WrongPassword")
    
    assert token_data is None


def test_refresh_token():
    """Test token refresh."""
    auth = AuthenticationService()
    
    auth.register_user("testuser", "test@example.com", "SecurePass123!")
    token_data = auth.login("testuser", "SecurePass123!")
    
    new_token_data = auth.refresh_access_token(token_data['refresh_token'])
    
    assert new_token_data is not None
    assert 'access_token' in new_token_data


def test_verify_access_token():
    """Test access token verification."""
    auth = AuthenticationService()
    
    auth.register_user("testuser", "test@example.com", "SecurePass123!")
    token_data = auth.login("testuser", "SecurePass123!")
    
    user = auth.verify_access_token(token_data['access_token'])
    
    assert user is not None
    assert user.username == "testuser"


def test_api_key_verification():
    """Test API key verification."""
    auth = AuthenticationService()
    
    user, _ = auth.register_user("testuser", "test@example.com", "SecurePass123!")
    
    verified_user = auth.verify_api_key(user.api_key)
    
    assert verified_user is not None
    assert verified_user.username == "testuser"


def test_regenerate_api_key():
    """Test API key regeneration."""
    auth = AuthenticationService()
    
    user, _ = auth.register_user("testuser", "test@example.com", "SecurePass123!")
    old_key = user.api_key
    
    new_key = auth.regenerate_api_key(user.id)
    
    assert new_key is not None
    assert new_key != old_key
