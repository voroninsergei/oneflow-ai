# ============================================
# OneFlow.AI - Kubernetes Deployment
# ============================================

---
# ============================================
# Namespace
# ============================================
apiVersion: v1
kind: Namespace
metadata:
  name: oneflow
  labels:
    app: oneflow-ai

---
# ============================================
# Secrets
# ============================================
apiVersion: v1
kind: Secret
metadata:
  name: oneflow-api-keys
  namespace: oneflow
type: Opaque
stringData:
  # ВАЖНО: В продакшене используйте kubectl create secret
  # или внешние Secret Management системы (Vault, AWS Secrets Manager)
  openai-key: "REPLACE_WITH_REAL_KEY"
  anthropic-key: "REPLACE_WITH_REAL_KEY"
  stability-key: "REPLACE_WITH_REAL_KEY"
  elevenlabs-key: "REPLACE_WITH_REAL_KEY"
  jwt-secret-key: "REPLACE_WITH_REAL_SECRET"

---
# ============================================
# ConfigMap
# ============================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: oneflow-config
  namespace: oneflow
data:
  HOST: "0.0.0.0"
  PORT: "8000"
  DEBUG: "false"
  LOG_LEVEL: "INFO"
  DATABASE_URL: "postgresql://oneflow:password@postgres:5432/oneflow"
  JWT_ALGORITHM: "HS256"
  ACCESS_TOKEN_EXPIRE_MINUTES: "30"
  ENABLE_ANALYTICS: "true"
  ENABLE_BUDGET_ENFORCEMENT: "true"
  ENABLE_RATE_LIMITING: "true"

---
# ============================================
# Deployment
# ============================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oneflow-ai
  namespace: oneflow
  labels:
    app: oneflow-ai
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: oneflow-ai
  template:
    metadata:
      labels:
        app: oneflow-ai
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      
      # Init containers
      initContainers:
      - name: wait-for-db
        image: busybox:latest
        command: ['sh', '-c', 'until nc -z postgres 5432; do echo waiting for db; sleep 2; done;']
      
      # Main container
      containers:
      - name: oneflow-ai
        image: oneflow-ai:latest
        imagePullPolicy: Always
        
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        
        # Environment from ConfigMap
        envFrom:
        - configMapRef:
            name: oneflow-config
        
        # Secrets as environment variables
        env:
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: oneflow-api-keys
              key: openai-key
        
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: oneflow-api-keys
              key: anthropic-key
        
        - name: STABILITY_API_KEY
          valueFrom:
            secretKeyRef:
              name: oneflow-api-keys
              key: stability-key
        
        - name: ELEVENLABS_API_KEY
          valueFrom:
            secretKeyRef:
              name: oneflow-api-keys
              key: elevenlabs-key
        
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: oneflow-api-keys
              key: jwt-secret-key
        
        # Resource limits
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        # Liveness probe
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        # Readiness probe
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        # Startup probe
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 30
        
        # Volume mounts
        volumeMounts:
        - name: data
          mountPath: /app/data
        - name: logs
          mountPath: /app/logs
      
      # Volumes
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: oneflow-data-pvc
      - name: logs
        emptyDir: {}

---
# ============================================
# Service
# ============================================
apiVersion: v1
kind: Service
metadata:
  name: oneflow-ai-service
  namespace: oneflow
  labels:
    app: oneflow-ai
spec:
  type: ClusterIP
  selector:
    app: oneflow-ai
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  sessionAffinity: ClientIP

---
# ============================================
# Ingress
# ============================================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: oneflow-ai-ingress
  namespace: oneflow
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
spec:
  tls:
  - hosts:
    - oneflow.example.com
    secretName: oneflow-tls
  rules:
  - host: oneflow.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: oneflow-ai-service
            port:
              number: 80

---
# ============================================
# HorizontalPodAutoscaler
# ============================================
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: oneflow-ai-hpa
  namespace: oneflow
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: oneflow-ai
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# ============================================
# PersistentVolumeClaim
# ============================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: oneflow-data-pvc
  namespace: oneflow
spec:
  accessModes:
  - ReadWriteMany
  storageClassName: standard
  resources:
    requests:
      storage: 10Gi

---
# ============================================
# NetworkPolicy (опционально)
# ============================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: oneflow-network-policy
  namespace: oneflow
spec:
  podSelector:
    matchLabels:
      app: oneflow-ai
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443  # HTTPS для API провайдеров
    - protocol: TCP
      port: 5432  # PostgreSQL

---
# ============================================
# ServiceAccount (для AWS IRSA / GCP Workload Identity)
# ============================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: oneflow-sa
  namespace: oneflow
  annotations:
    # Для AWS IRSA
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/oneflow-secrets-role
    # Для GCP Workload Identity
    iam.gke.io/gcp-service-account: oneflow@PROJECT_ID.iam.gserviceaccount.com

---
# ============================================
# Использование:
# ============================================
#
# 1. Создать namespace:
#    kubectl create namespace oneflow
#
# 2. Создать secrets безопасно:
#    kubectl create secret generic oneflow-api-keys \
#      --from-literal=openai-key='sk-proj-...' \
#      --from-literal=anthropic-key='sk-ant-...' \
#      --from-literal=stability-key='sk-...' \
#      --from-literal=elevenlabs-key='...' \
#      --from-literal=jwt-secret-key='your-jwt-secret' \
#      --namespace=oneflow
#
# 3. Применить конфигурацию:
#    kubectl apply -f kubernetes-deployment.yaml
#
# 4. Проверить статус:
#    kubectl get pods -n oneflow
#    kubectl get services -n oneflow
#
# 5. Просмотр логов:
#    kubectl logs -f deployment/oneflow-ai -n oneflow
#
# 6. Масштабирование:
#    kubectl scale deployment/oneflow-ai --replicas=5 -n oneflow
#
# 7. Удаление:
#    kubectl delete namespace oneflow
