apiVersion: v1
kind: Namespace
metadata:
  name: oneflow-ai

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: oneflow-config
  namespace: oneflow-ai
data:
  LOG_LEVEL: "INFO"
  ENVIRONMENT: "production"
  ENABLE_METRICS: "true"
  ENABLE_TRACING: "true"
  ALLOWED_ORIGINS: "https://yourdomain.com,https://app.yourdomain.com"
  DATABASE_POOL_SIZE: "20"
  DATABASE_MAX_OVERFLOW: "10"

---
apiVersion: v1
kind: Secret
metadata:
  name: oneflow-secrets
  namespace: oneflow-ai
type: Opaque
stringData:
  # ВАЖНО: В продакшене использовать External Secrets Operator или Vault
  JWT_SECRET: "change-me-in-production"
  DATABASE_URL: "postgresql://user:password@postgres:5432/oneflow"
  # API keys провайдеров (не коммитить в git!)
  OPENAI_API_KEY: ""
  ANTHROPIC_API_KEY: ""
  STABILITY_API_KEY: ""
  ELEVENLABS_API_KEY: ""
  REDIS_URL: "redis://redis:6379/0"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oneflow-ai
  namespace: oneflow-ai
  labels:
    app: oneflow-ai
    version: v2.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: oneflow-ai
  template:
    metadata:
      labels:
        app: oneflow-ai
        version: v2.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: oneflow-ai
      
      # Security Context для пода
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      containers:
      - name: oneflow-ai
        image: oneflow-ai:2.0.0  # Замените на ваш registry
        imagePullPolicy: IfNotPresent
        
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        
        # Environment Variables
        envFrom:
        - configMapRef:
            name: oneflow-config
        - secretRef:
            name: oneflow-secrets
        
        # Resource Limits
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "1000m"
        
        # Liveness Probe
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        # Readiness Probe
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        # Startup Probe (для медленного старта)
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 12  # 60 секунд на старт
        
        # Security Context для контейнера
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        
        # Volume Mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /home/appuser/.cache
      
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      
      # Topology Spread для распределения по нодам
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: oneflow-ai

---
apiVersion: v1
kind: Service
metadata:
  name: oneflow-ai
  namespace: oneflow-ai
  labels:
    app: oneflow-ai
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: oneflow-ai

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: oneflow-ai
  namespace: oneflow-ai

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: oneflow-ai-hpa
  namespace: oneflow-ai
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: oneflow-ai
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 30
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: oneflow-ai-pdb
  namespace: oneflow-ai
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: oneflow-ai

---
# Ingress (опционально, если используете ingress-nginx)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: oneflow-ai
  namespace: oneflow-ai
  annotations:
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/limit-rps: "10"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - api.yourdomain.com
    secretName: oneflow-ai-tls
  rules:
  - host: api.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: oneflow-ai
            port:
              number: 8000
