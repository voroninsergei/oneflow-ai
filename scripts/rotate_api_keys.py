#!/usr/bin/env python3
"""
API Key Rotation Script
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è API –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π OneFlow.AI
"""
import sys
import os
import argparse
from datetime import datetime, timedelta
from typing import Optional
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from auth_v2 import (
    APIKeyManager,
    AuthDatabase,
    APIKey
)

import structlog

logger = structlog.get_logger()


class KeyRotationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π"""
    
    def __init__(self, db: AuthDatabase):
        self.db = db
    
    def rotate_user_keys(
        self,
        user_id: str,
        grace_period_days: int = 7,
        notify: bool = True
    ) -> dict:
        """
        –†–æ—Ç–∞—Ü–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            grace_period_days: –ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π
            notify: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–æ—Ç–∞—Ü–∏–∏
        """
        user = self.db.get_user_by_id(user_id)
        if not user:
            raise ValueError(f"User {user_id} not found")
        
        results = {
            "user_id": user_id,
            "rotated_keys": [],
            "timestamp": datetime.utcnow().isoformat()
        }
        
        for api_key in user.api_keys:
            if api_key.is_active:
                try:
                    new_plain_key, new_api_key, old_expiry = APIKeyManager.rotate_key(
                        api_key,
                        grace_period_days
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
                    self.db.store_api_key(new_api_key)
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞
                    api_key.expires_at = old_expiry
                    
                    results["rotated_keys"].append({
                        "old_key_id": api_key.key_id,
                        "new_key_id": new_api_key.key_id,
                        "new_key": new_plain_key,
                        "old_key_expires_at": old_expiry.isoformat(),
                        "grace_period_days": grace_period_days
                    })
                    
                    logger.info(
                        "key_rotated_successfully",
                        user_id=user_id,
                        old_key_id=api_key.key_id,
                        new_key_id=new_api_key.key_id
                    )
                    
                except Exception as e:
                    logger.error(
                        "key_rotation_failed",
                        user_id=user_id,
                        key_id=api_key.key_id,
                        error=str(e)
                    )
                    results["rotated_keys"].append({
                        "old_key_id": api_key.key_id,
                        "error": str(e)
                    })
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
        if notify and results["rotated_keys"]:
            self._send_notification(user, results)
        
        return results
    
    def rotate_expiring_keys(
        self,
        days_threshold: int = 30,
        grace_period_days: int = 7
    ) -> list:
        """
        –†–æ—Ç–∞—Ü–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ N –¥–Ω–µ–π
        
        Args:
            days_threshold: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            grace_period_days: Grace period –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–æ—Ç–∞—Ü–∏–∏
        """
        threshold_date = datetime.utcnow() + timedelta(days=days_threshold)
        results = []
        
        for user in self.db.users.values():
            expiring_keys = [
                key for key in user.api_keys
                if key.is_active 
                and key.expires_at 
                and key.expires_at <= threshold_date
            ]
            
            if expiring_keys:
                logger.info(
                    "found_expiring_keys",
                    user_id=user.user_id,
                    count=len(expiring_keys)
                )
                
                result = self.rotate_user_keys(
                    user.user_id,
                    grace_period_days,
                    notify=True
                )
                results.append(result)
        
        return results
    
    def cleanup_expired_keys(self) -> int:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–ª—é—á–µ–π (grace period –∑–∞–∫–æ–Ω—á–∏–ª—Å—è)
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
        """
        now = datetime.utcnow()
        deleted_count = 0
        
        for user in self.db.users.values():
            expired_keys = [
                key for key in user.api_keys
                if key.expires_at and key.expires_at < now
            ]
            
            for key in expired_keys:
                key.is_active = False
                deleted_count += 1
                
                logger.info(
                    "expired_key_deactivated",
                    user_id=user.user_id,
                    key_id=key.key_id
                )
        
        return deleted_count
    
    def _send_notification(self, user, rotation_results: dict):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SendGrid/SES/SMTP
        """
        logger.info(
            "notification_sent",
            user_id=user.user_id,
            email=user.email,
            rotated_count=len(rotation_results["rotated_keys"])
        )
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
        print(f"\nüìß Email notification to {user.email}:")
        print(f"Subject: OneFlow.AI - API Keys Rotated")
        print(f"\nYour API keys have been rotated for security.")
        print(f"Number of keys rotated: {len(rotation_results['rotated_keys'])}")
        print(f"\nNew keys:")
        for key_info in rotation_results["rotated_keys"]:
            if "new_key" in key_info:
                print(f"  - {key_info['new_key']}")
                print(f"    (Old key valid until: {key_info['old_key_expires_at']})")


def generate_rotation_report(results: list, output_file: Optional[str] = None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –æ —Ä–æ—Ç–∞—Ü–∏–∏"""
    report = {
        "rotation_date": datetime.utcnow().isoformat(),
        "total_users": len(results),
        "total_keys_rotated": sum(len(r["rotated_keys"]) for r in results),
        "results": results
    }
    
    if output_file:
        with open(output_file, 'w') as f:
            json.dump(report, f, indent=2)
        print(f"‚úÖ Report saved to {output_file}")
    else:
        print(json.dumps(report, indent=2))
    
    return report


def main():
    parser = argparse.ArgumentParser(
        description='OneFlow.AI API Key Rotation Tool'
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Commands')
    
    # –†–æ—Ç–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    rotate_user = subparsers.add_parser(
        'rotate-user',
        help='Rotate API keys for specific user'
    )
    rotate_user.add_argument('user_id', help='User ID')
    rotate_user.add_argument(
        '--grace-period',
        type=int,
        default=7,
        help='Grace period in days (default: 7)'
    )
    rotate_user.add_argument(
        '--no-notify',
        action='store_true',
        help='Do not send notification'
    )
    
    # –†–æ—Ç–∞—Ü–∏—è –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∫–ª—é—á–µ–π
    rotate_expiring = subparsers.add_parser(
        'rotate-expiring',
        help='Rotate all keys expiring soon'
    )
    rotate_expiring.add_argument(
        '--days',
        type=int,
        default=30,
        help='Rotate keys expiring in N days (default: 30)'
    )
    rotate_expiring.add_argument(
        '--grace-period',
        type=int,
        default=7,
        help='Grace period in days (default: 7)'
    )
    rotate_expiring.add_argument(
        '--output',
        help='Save report to file'
    )
    
    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–ª—é—á–µ–π
    cleanup = subparsers.add_parser(
        'cleanup',
        help='Deactivate expired keys'
    )
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î)
    db = AuthDatabase()
    service = KeyRotationService(db)
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if args.command == 'rotate-user':
        print(f"üîÑ Rotating keys for user: {args.user_id}")
        
        result = service.rotate_user_keys(
            args.user_id,
            grace_period_days=args.grace_period,
            notify=not args.no_notify
        )
        
        print(f"‚úÖ Rotated {len(result['rotated_keys'])} key(s)")
        print(json.dumps(result, indent=2))
    
    elif args.command == 'rotate-expiring':
        print(f"üîÑ Rotating keys expiring in {args.days} days...")
        
        results = service.rotate_expiring_keys(
            days_threshold=args.days,
            grace_period_days=args.grace_period
        )
        
        report = generate_rotation_report(results, args.output)
        
        print(f"\n‚úÖ Rotation complete!")
        print(f"   Users affected: {report['total_users']}")
        print(f"   Keys rotated: {report['total_keys_rotated']}")
    
    elif args.command == 'cleanup':
        print("üßπ Cleaning up expired keys...")
        
        deleted = service.cleanup_expired_keys()
        
        print(f"‚úÖ Deactivated {deleted} expired key(s)")


if __name__ == "__main__":
    main()
